/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

namespace java ezbake.services.search

include "ezbakeBaseService.thrift"
include "ezbakeBaseTypes.thrift"
include "ezElastic.thrift"
include "ezbakeBasePurgeService.thrift"

const string SERVICE_NAME = "ssrService"

union RawValue 
{
    1: optional string stringValue;
    2: optional i32 intValue;
    3: optional double doubleValue;
}

struct FacetValue
{
    1: optional string label;
    2: optional RawValue value;
    3: optional string count;
}

struct FacetCategory
{
    1: optional string field;
    2: optional list<FacetValue> facetValues;
}

struct SSRSearchResult
{
    1: optional list<ezbakeBaseTypes.SSR> matchingRecords;
    2: optional i64 totalHits;
    3: optional i32 offset;
    4: optional i16 pageSize;
    5: optional map<string, FacetCategory> facets;
    6: optional map<string, ezElastic.HighlightResult> highlights;  // Maps from doc id => highlight result;
}

service ssrService extends ezbakeBasePurgeService.EzBakeBasePurgeService
{
    /**
     This method inserts the supplied SSR documents along with their provided JSON documents into the EzElastic dataset.
     Each document that is inserted is indexed by the geo coordinates provided in the SSR object, the date in the SSR,
     and all free text in the JSON portion of the entry. A dynamic mapping is being used for this index, so each new JSON
     document will generate a new type in Elasticsearch, and each field will be indexed appropriately.

     1. ssrJsonMap - A map of SSR objects to their JSON counterparts. The JSON object should be representative of the
                     document that the SSR describes. For example, if creating an SSR for a wikipedia article, the SSR
                     would contain the date that the article was published as the result date, as well as the article title,
                     etc. The JSON portion of that entry would be any extracted free text from the HTML article. In other
                     more structured cases, the JSON document should preserve the structure of the incoming document
                     to improve searchability.
     2. userToken  - An EzSecurityToken generated by the client for this insert request.
     */
    list<ezElastic.IndexResponse> putWithDocs(1:map<ezbakeBaseTypes.SSR, string> ssrJsonMap, 2:ezbakeBaseTypes.EzSecurityToken userToken);

    /**
     This is a targeted query that returns a list of SSRs that match the provided query parameters. This query will ONLY
     return the SSR field of incoming documents. Several SSR specific facets are set with this search including date and
     geo facets. This query also performs an Elasticsearch highlight query and places the highlight results in the returned
     Thrift structure. The highlight results may contain data from fields that aren't retuend with the SSR object.

     params:
     1. query     - The query being used to retrieve SSR objects. NOTE: Returned fields will be replaced with the SSR
                    field, as this method will be returning SSRs.
     4. userToken - An EzSecurityToken generated by the client for this search request.
     */
    SSRSearchResult searchSSR(1:ezElastic.Query query, 2:ezbakeBaseTypes.EzSecurityToken userToken);

    /**
     This is a free-form query that returns a SearchResult directly from the EzElastic dataset that backs the SSR
     Service. When using this query, assume that all fields from the incoming JSON document (the JSON portion of the
     SSRJSON object) are available as fields to query. This method is essentially a pass-through to the EzElastic dataset.

     params:
     1. query     - The query object that will be forwarded to the EzElastic dataset.
     2. userToken - An EzSecurityToken generated by the client for this search request.
     */
     ezElastic.SearchResult search(1:ezElastic.Query query, 2:ezbakeBaseTypes.EzSecurityToken userToken);
}
