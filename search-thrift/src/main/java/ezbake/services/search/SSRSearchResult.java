/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SSRSearchResult implements org.apache.thrift.TBase<SSRSearchResult, SSRSearchResult._Fields>, java.io.Serializable, Cloneable, Comparable<SSRSearchResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SSRSearchResult");

  private static final org.apache.thrift.protocol.TField MATCHING_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("matchingRecords", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalHits", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField FACETS_FIELD_DESC = new org.apache.thrift.protocol.TField("facets", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField HIGHLIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("highlights", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SSRSearchResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SSRSearchResultTupleSchemeFactory());
  }

  public List<ezbake.base.thrift.SSR> matchingRecords; // optional
  public long totalHits; // optional
  public int offset; // optional
  public short pageSize; // optional
  public Map<String,FacetCategory> facets; // optional
  public Map<String,ezbake.data.elastic.thrift.HighlightResult> highlights; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MATCHING_RECORDS((short)1, "matchingRecords"),
    TOTAL_HITS((short)2, "totalHits"),
    OFFSET((short)3, "offset"),
    PAGE_SIZE((short)4, "pageSize"),
    FACETS((short)5, "facets"),
    HIGHLIGHTS((short)6, "highlights");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MATCHING_RECORDS
          return MATCHING_RECORDS;
        case 2: // TOTAL_HITS
          return TOTAL_HITS;
        case 3: // OFFSET
          return OFFSET;
        case 4: // PAGE_SIZE
          return PAGE_SIZE;
        case 5: // FACETS
          return FACETS;
        case 6: // HIGHLIGHTS
          return HIGHLIGHTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALHITS_ISSET_ID = 0;
  private static final int __OFFSET_ISSET_ID = 1;
  private static final int __PAGESIZE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MATCHING_RECORDS,_Fields.TOTAL_HITS,_Fields.OFFSET,_Fields.PAGE_SIZE,_Fields.FACETS,_Fields.HIGHLIGHTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MATCHING_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("matchingRecords", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.SSR.class))));
    tmpMap.put(_Fields.TOTAL_HITS, new org.apache.thrift.meta_data.FieldMetaData("totalHits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.FACETS, new org.apache.thrift.meta_data.FieldMetaData("facets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FacetCategory.class))));
    tmpMap.put(_Fields.HIGHLIGHTS, new org.apache.thrift.meta_data.FieldMetaData("highlights", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.data.elastic.thrift.HighlightResult.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SSRSearchResult.class, metaDataMap);
  }

  public SSRSearchResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SSRSearchResult(SSRSearchResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMatchingRecords()) {
      List<ezbake.base.thrift.SSR> __this__matchingRecords = new ArrayList<ezbake.base.thrift.SSR>(other.matchingRecords.size());
      for (ezbake.base.thrift.SSR other_element : other.matchingRecords) {
        __this__matchingRecords.add(new ezbake.base.thrift.SSR(other_element));
      }
      this.matchingRecords = __this__matchingRecords;
    }
    this.totalHits = other.totalHits;
    this.offset = other.offset;
    this.pageSize = other.pageSize;
    if (other.isSetFacets()) {
      Map<String,FacetCategory> __this__facets = new HashMap<String,FacetCategory>(other.facets.size());
      for (Map.Entry<String, FacetCategory> other_element : other.facets.entrySet()) {

        String other_element_key = other_element.getKey();
        FacetCategory other_element_value = other_element.getValue();

        String __this__facets_copy_key = other_element_key;

        FacetCategory __this__facets_copy_value = new FacetCategory(other_element_value);

        __this__facets.put(__this__facets_copy_key, __this__facets_copy_value);
      }
      this.facets = __this__facets;
    }
    if (other.isSetHighlights()) {
      Map<String,ezbake.data.elastic.thrift.HighlightResult> __this__highlights = new HashMap<String,ezbake.data.elastic.thrift.HighlightResult>(other.highlights.size());
      for (Map.Entry<String, ezbake.data.elastic.thrift.HighlightResult> other_element : other.highlights.entrySet()) {

        String other_element_key = other_element.getKey();
        ezbake.data.elastic.thrift.HighlightResult other_element_value = other_element.getValue();

        String __this__highlights_copy_key = other_element_key;

        ezbake.data.elastic.thrift.HighlightResult __this__highlights_copy_value = new ezbake.data.elastic.thrift.HighlightResult(other_element_value);

        __this__highlights.put(__this__highlights_copy_key, __this__highlights_copy_value);
      }
      this.highlights = __this__highlights;
    }
  }

  public SSRSearchResult deepCopy() {
    return new SSRSearchResult(this);
  }

  @Override
  public void clear() {
    this.matchingRecords = null;
    setTotalHitsIsSet(false);
    this.totalHits = 0;
    setOffsetIsSet(false);
    this.offset = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    this.facets = null;
    this.highlights = null;
  }

  public int getMatchingRecordsSize() {
    return (this.matchingRecords == null) ? 0 : this.matchingRecords.size();
  }

  public java.util.Iterator<ezbake.base.thrift.SSR> getMatchingRecordsIterator() {
    return (this.matchingRecords == null) ? null : this.matchingRecords.iterator();
  }

  public void addToMatchingRecords(ezbake.base.thrift.SSR elem) {
    if (this.matchingRecords == null) {
      this.matchingRecords = new ArrayList<ezbake.base.thrift.SSR>();
    }
    this.matchingRecords.add(elem);
  }

  public List<ezbake.base.thrift.SSR> getMatchingRecords() {
    return this.matchingRecords;
  }

  public SSRSearchResult setMatchingRecords(List<ezbake.base.thrift.SSR> matchingRecords) {
    this.matchingRecords = matchingRecords;
    return this;
  }

  public void unsetMatchingRecords() {
    this.matchingRecords = null;
  }

  /** Returns true if field matchingRecords is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchingRecords() {
    return this.matchingRecords != null;
  }

  public void setMatchingRecordsIsSet(boolean value) {
    if (!value) {
      this.matchingRecords = null;
    }
  }

  public long getTotalHits() {
    return this.totalHits;
  }

  public SSRSearchResult setTotalHits(long totalHits) {
    this.totalHits = totalHits;
    setTotalHitsIsSet(true);
    return this;
  }

  public void unsetTotalHits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALHITS_ISSET_ID);
  }

  /** Returns true if field totalHits is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalHits() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALHITS_ISSET_ID);
  }

  public void setTotalHitsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALHITS_ISSET_ID, value);
  }

  public int getOffset() {
    return this.offset;
  }

  public SSRSearchResult setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public short getPageSize() {
    return this.pageSize;
  }

  public SSRSearchResult setPageSize(short pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getFacetsSize() {
    return (this.facets == null) ? 0 : this.facets.size();
  }

  public void putToFacets(String key, FacetCategory val) {
    if (this.facets == null) {
      this.facets = new HashMap<String,FacetCategory>();
    }
    this.facets.put(key, val);
  }

  public Map<String,FacetCategory> getFacets() {
    return this.facets;
  }

  public SSRSearchResult setFacets(Map<String,FacetCategory> facets) {
    this.facets = facets;
    return this;
  }

  public void unsetFacets() {
    this.facets = null;
  }

  /** Returns true if field facets is set (has been assigned a value) and false otherwise */
  public boolean isSetFacets() {
    return this.facets != null;
  }

  public void setFacetsIsSet(boolean value) {
    if (!value) {
      this.facets = null;
    }
  }

  public int getHighlightsSize() {
    return (this.highlights == null) ? 0 : this.highlights.size();
  }

  public void putToHighlights(String key, ezbake.data.elastic.thrift.HighlightResult val) {
    if (this.highlights == null) {
      this.highlights = new HashMap<String,ezbake.data.elastic.thrift.HighlightResult>();
    }
    this.highlights.put(key, val);
  }

  public Map<String,ezbake.data.elastic.thrift.HighlightResult> getHighlights() {
    return this.highlights;
  }

  public SSRSearchResult setHighlights(Map<String,ezbake.data.elastic.thrift.HighlightResult> highlights) {
    this.highlights = highlights;
    return this;
  }

  public void unsetHighlights() {
    this.highlights = null;
  }

  /** Returns true if field highlights is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlights() {
    return this.highlights != null;
  }

  public void setHighlightsIsSet(boolean value) {
    if (!value) {
      this.highlights = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MATCHING_RECORDS:
      if (value == null) {
        unsetMatchingRecords();
      } else {
        setMatchingRecords((List<ezbake.base.thrift.SSR>)value);
      }
      break;

    case TOTAL_HITS:
      if (value == null) {
        unsetTotalHits();
      } else {
        setTotalHits((Long)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Short)value);
      }
      break;

    case FACETS:
      if (value == null) {
        unsetFacets();
      } else {
        setFacets((Map<String,FacetCategory>)value);
      }
      break;

    case HIGHLIGHTS:
      if (value == null) {
        unsetHighlights();
      } else {
        setHighlights((Map<String,ezbake.data.elastic.thrift.HighlightResult>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MATCHING_RECORDS:
      return getMatchingRecords();

    case TOTAL_HITS:
      return Long.valueOf(getTotalHits());

    case OFFSET:
      return Integer.valueOf(getOffset());

    case PAGE_SIZE:
      return Short.valueOf(getPageSize());

    case FACETS:
      return getFacets();

    case HIGHLIGHTS:
      return getHighlights();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MATCHING_RECORDS:
      return isSetMatchingRecords();
    case TOTAL_HITS:
      return isSetTotalHits();
    case OFFSET:
      return isSetOffset();
    case PAGE_SIZE:
      return isSetPageSize();
    case FACETS:
      return isSetFacets();
    case HIGHLIGHTS:
      return isSetHighlights();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SSRSearchResult)
      return this.equals((SSRSearchResult)that);
    return false;
  }

  public boolean equals(SSRSearchResult that) {
    if (that == null)
      return false;

    boolean this_present_matchingRecords = true && this.isSetMatchingRecords();
    boolean that_present_matchingRecords = true && that.isSetMatchingRecords();
    if (this_present_matchingRecords || that_present_matchingRecords) {
      if (!(this_present_matchingRecords && that_present_matchingRecords))
        return false;
      if (!this.matchingRecords.equals(that.matchingRecords))
        return false;
    }

    boolean this_present_totalHits = true && this.isSetTotalHits();
    boolean that_present_totalHits = true && that.isSetTotalHits();
    if (this_present_totalHits || that_present_totalHits) {
      if (!(this_present_totalHits && that_present_totalHits))
        return false;
      if (this.totalHits != that.totalHits)
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_pageSize = true && this.isSetPageSize();
    boolean that_present_pageSize = true && that.isSetPageSize();
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_facets = true && this.isSetFacets();
    boolean that_present_facets = true && that.isSetFacets();
    if (this_present_facets || that_present_facets) {
      if (!(this_present_facets && that_present_facets))
        return false;
      if (!this.facets.equals(that.facets))
        return false;
    }

    boolean this_present_highlights = true && this.isSetHighlights();
    boolean that_present_highlights = true && that.isSetHighlights();
    if (this_present_highlights || that_present_highlights) {
      if (!(this_present_highlights && that_present_highlights))
        return false;
      if (!this.highlights.equals(that.highlights))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SSRSearchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMatchingRecords()).compareTo(other.isSetMatchingRecords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchingRecords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchingRecords, other.matchingRecords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalHits()).compareTo(other.isSetTotalHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalHits, other.totalHits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacets()).compareTo(other.isSetFacets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facets, other.facets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlights()).compareTo(other.isSetHighlights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlights, other.highlights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SSRSearchResult(");
    boolean first = true;

    if (isSetMatchingRecords()) {
      sb.append("matchingRecords:");
      if (this.matchingRecords == null) {
        sb.append("null");
      } else {
        sb.append(this.matchingRecords);
      }
      first = false;
    }
    if (isSetTotalHits()) {
      if (!first) sb.append(", ");
      sb.append("totalHits:");
      sb.append(this.totalHits);
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetPageSize()) {
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
    }
    if (isSetFacets()) {
      if (!first) sb.append(", ");
      sb.append("facets:");
      if (this.facets == null) {
        sb.append("null");
      } else {
        sb.append(this.facets);
      }
      first = false;
    }
    if (isSetHighlights()) {
      if (!first) sb.append(", ");
      sb.append("highlights:");
      if (this.highlights == null) {
        sb.append("null");
      } else {
        sb.append(this.highlights);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SSRSearchResultStandardSchemeFactory implements SchemeFactory {
    public SSRSearchResultStandardScheme getScheme() {
      return new SSRSearchResultStandardScheme();
    }
  }

  private static class SSRSearchResultStandardScheme extends StandardScheme<SSRSearchResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SSRSearchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MATCHING_RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.matchingRecords = new ArrayList<ezbake.base.thrift.SSR>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  ezbake.base.thrift.SSR _elem10;
                  _elem10 = new ezbake.base.thrift.SSR();
                  _elem10.read(iprot);
                  struct.matchingRecords.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setMatchingRecordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalHits = iprot.readI64();
              struct.setTotalHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.pageSize = iprot.readI16();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FACETS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin();
                struct.facets = new HashMap<String,FacetCategory>(2*_map11.size);
                for (int _i12 = 0; _i12 < _map11.size; ++_i12)
                {
                  String _key13;
                  FacetCategory _val14;
                  _key13 = iprot.readString();
                  _val14 = new FacetCategory();
                  _val14.read(iprot);
                  struct.facets.put(_key13, _val14);
                }
                iprot.readMapEnd();
              }
              struct.setFacetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HIGHLIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
                struct.highlights = new HashMap<String,ezbake.data.elastic.thrift.HighlightResult>(2*_map15.size);
                for (int _i16 = 0; _i16 < _map15.size; ++_i16)
                {
                  String _key17;
                  ezbake.data.elastic.thrift.HighlightResult _val18;
                  _key17 = iprot.readString();
                  _val18 = new ezbake.data.elastic.thrift.HighlightResult();
                  _val18.read(iprot);
                  struct.highlights.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setHighlightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SSRSearchResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.matchingRecords != null) {
        if (struct.isSetMatchingRecords()) {
          oprot.writeFieldBegin(MATCHING_RECORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.matchingRecords.size()));
            for (ezbake.base.thrift.SSR _iter19 : struct.matchingRecords)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalHits()) {
        oprot.writeFieldBegin(TOTAL_HITS_FIELD_DESC);
        oprot.writeI64(struct.totalHits);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPageSize()) {
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI16(struct.pageSize);
        oprot.writeFieldEnd();
      }
      if (struct.facets != null) {
        if (struct.isSetFacets()) {
          oprot.writeFieldBegin(FACETS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.facets.size()));
            for (Map.Entry<String, FacetCategory> _iter20 : struct.facets.entrySet())
            {
              oprot.writeString(_iter20.getKey());
              _iter20.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.highlights != null) {
        if (struct.isSetHighlights()) {
          oprot.writeFieldBegin(HIGHLIGHTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.highlights.size()));
            for (Map.Entry<String, ezbake.data.elastic.thrift.HighlightResult> _iter21 : struct.highlights.entrySet())
            {
              oprot.writeString(_iter21.getKey());
              _iter21.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SSRSearchResultTupleSchemeFactory implements SchemeFactory {
    public SSRSearchResultTupleScheme getScheme() {
      return new SSRSearchResultTupleScheme();
    }
  }

  private static class SSRSearchResultTupleScheme extends TupleScheme<SSRSearchResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SSRSearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMatchingRecords()) {
        optionals.set(0);
      }
      if (struct.isSetTotalHits()) {
        optionals.set(1);
      }
      if (struct.isSetOffset()) {
        optionals.set(2);
      }
      if (struct.isSetPageSize()) {
        optionals.set(3);
      }
      if (struct.isSetFacets()) {
        optionals.set(4);
      }
      if (struct.isSetHighlights()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMatchingRecords()) {
        {
          oprot.writeI32(struct.matchingRecords.size());
          for (ezbake.base.thrift.SSR _iter22 : struct.matchingRecords)
          {
            _iter22.write(oprot);
          }
        }
      }
      if (struct.isSetTotalHits()) {
        oprot.writeI64(struct.totalHits);
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI16(struct.pageSize);
      }
      if (struct.isSetFacets()) {
        {
          oprot.writeI32(struct.facets.size());
          for (Map.Entry<String, FacetCategory> _iter23 : struct.facets.entrySet())
          {
            oprot.writeString(_iter23.getKey());
            _iter23.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetHighlights()) {
        {
          oprot.writeI32(struct.highlights.size());
          for (Map.Entry<String, ezbake.data.elastic.thrift.HighlightResult> _iter24 : struct.highlights.entrySet())
          {
            oprot.writeString(_iter24.getKey());
            _iter24.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SSRSearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.matchingRecords = new ArrayList<ezbake.base.thrift.SSR>(_list25.size);
          for (int _i26 = 0; _i26 < _list25.size; ++_i26)
          {
            ezbake.base.thrift.SSR _elem27;
            _elem27 = new ezbake.base.thrift.SSR();
            _elem27.read(iprot);
            struct.matchingRecords.add(_elem27);
          }
        }
        struct.setMatchingRecordsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalHits = iprot.readI64();
        struct.setTotalHitsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pageSize = iprot.readI16();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map28 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.facets = new HashMap<String,FacetCategory>(2*_map28.size);
          for (int _i29 = 0; _i29 < _map28.size; ++_i29)
          {
            String _key30;
            FacetCategory _val31;
            _key30 = iprot.readString();
            _val31 = new FacetCategory();
            _val31.read(iprot);
            struct.facets.put(_key30, _val31);
          }
        }
        struct.setFacetsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.highlights = new HashMap<String,ezbake.data.elastic.thrift.HighlightResult>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            String _key34;
            ezbake.data.elastic.thrift.HighlightResult _val35;
            _key34 = iprot.readString();
            _val35 = new ezbake.data.elastic.thrift.HighlightResult();
            _val35.read(iprot);
            struct.highlights.put(_key34, _val35);
          }
        }
        struct.setHighlightsIsSet(true);
      }
    }
  }

}

