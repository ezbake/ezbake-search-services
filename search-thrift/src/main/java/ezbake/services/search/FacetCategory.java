/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FacetCategory implements org.apache.thrift.TBase<FacetCategory, FacetCategory._Fields>, java.io.Serializable, Cloneable, Comparable<FacetCategory> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FacetCategory");

  private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FACET_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("facetValues", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FacetCategoryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FacetCategoryTupleSchemeFactory());
  }

  public String field; // optional
  public List<FacetValue> facetValues; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD((short)1, "field"),
    FACET_VALUES((short)2, "facetValues");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD
          return FIELD;
        case 2: // FACET_VALUES
          return FACET_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FIELD,_Fields.FACET_VALUES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FACET_VALUES, new org.apache.thrift.meta_data.FieldMetaData("facetValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FacetValue.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FacetCategory.class, metaDataMap);
  }

  public FacetCategory() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FacetCategory(FacetCategory other) {
    if (other.isSetField()) {
      this.field = other.field;
    }
    if (other.isSetFacetValues()) {
      List<FacetValue> __this__facetValues = new ArrayList<FacetValue>(other.facetValues.size());
      for (FacetValue other_element : other.facetValues) {
        __this__facetValues.add(new FacetValue(other_element));
      }
      this.facetValues = __this__facetValues;
    }
  }

  public FacetCategory deepCopy() {
    return new FacetCategory(this);
  }

  @Override
  public void clear() {
    this.field = null;
    this.facetValues = null;
  }

  public String getField() {
    return this.field;
  }

  public FacetCategory setField(String field) {
    this.field = field;
    return this;
  }

  public void unsetField() {
    this.field = null;
  }

  /** Returns true if field field is set (has been assigned a value) and false otherwise */
  public boolean isSetField() {
    return this.field != null;
  }

  public void setFieldIsSet(boolean value) {
    if (!value) {
      this.field = null;
    }
  }

  public int getFacetValuesSize() {
    return (this.facetValues == null) ? 0 : this.facetValues.size();
  }

  public java.util.Iterator<FacetValue> getFacetValuesIterator() {
    return (this.facetValues == null) ? null : this.facetValues.iterator();
  }

  public void addToFacetValues(FacetValue elem) {
    if (this.facetValues == null) {
      this.facetValues = new ArrayList<FacetValue>();
    }
    this.facetValues.add(elem);
  }

  public List<FacetValue> getFacetValues() {
    return this.facetValues;
  }

  public FacetCategory setFacetValues(List<FacetValue> facetValues) {
    this.facetValues = facetValues;
    return this;
  }

  public void unsetFacetValues() {
    this.facetValues = null;
  }

  /** Returns true if field facetValues is set (has been assigned a value) and false otherwise */
  public boolean isSetFacetValues() {
    return this.facetValues != null;
  }

  public void setFacetValuesIsSet(boolean value) {
    if (!value) {
      this.facetValues = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD:
      if (value == null) {
        unsetField();
      } else {
        setField((String)value);
      }
      break;

    case FACET_VALUES:
      if (value == null) {
        unsetFacetValues();
      } else {
        setFacetValues((List<FacetValue>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD:
      return getField();

    case FACET_VALUES:
      return getFacetValues();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD:
      return isSetField();
    case FACET_VALUES:
      return isSetFacetValues();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FacetCategory)
      return this.equals((FacetCategory)that);
    return false;
  }

  public boolean equals(FacetCategory that) {
    if (that == null)
      return false;

    boolean this_present_field = true && this.isSetField();
    boolean that_present_field = true && that.isSetField();
    if (this_present_field || that_present_field) {
      if (!(this_present_field && that_present_field))
        return false;
      if (!this.field.equals(that.field))
        return false;
    }

    boolean this_present_facetValues = true && this.isSetFacetValues();
    boolean that_present_facetValues = true && that.isSetFacetValues();
    if (this_present_facetValues || that_present_facetValues) {
      if (!(this_present_facetValues && that_present_facetValues))
        return false;
      if (!this.facetValues.equals(that.facetValues))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FacetCategory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetField()).compareTo(other.isSetField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacetValues()).compareTo(other.isSetFacetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facetValues, other.facetValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FacetCategory(");
    boolean first = true;

    if (isSetField()) {
      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
    }
    if (isSetFacetValues()) {
      if (!first) sb.append(", ");
      sb.append("facetValues:");
      if (this.facetValues == null) {
        sb.append("null");
      } else {
        sb.append(this.facetValues);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FacetCategoryStandardSchemeFactory implements SchemeFactory {
    public FacetCategoryStandardScheme getScheme() {
      return new FacetCategoryStandardScheme();
    }
  }

  private static class FacetCategoryStandardScheme extends StandardScheme<FacetCategory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FacetCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field = iprot.readString();
              struct.setFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FACET_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.facetValues = new ArrayList<FacetValue>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  FacetValue _elem2;
                  _elem2 = new FacetValue();
                  _elem2.read(iprot);
                  struct.facetValues.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setFacetValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FacetCategory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.field != null) {
        if (struct.isSetField()) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          oprot.writeString(struct.field);
          oprot.writeFieldEnd();
        }
      }
      if (struct.facetValues != null) {
        if (struct.isSetFacetValues()) {
          oprot.writeFieldBegin(FACET_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.facetValues.size()));
            for (FacetValue _iter3 : struct.facetValues)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FacetCategoryTupleSchemeFactory implements SchemeFactory {
    public FacetCategoryTupleScheme getScheme() {
      return new FacetCategoryTupleScheme();
    }
  }

  private static class FacetCategoryTupleScheme extends TupleScheme<FacetCategory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FacetCategory struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetField()) {
        optionals.set(0);
      }
      if (struct.isSetFacetValues()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetField()) {
        oprot.writeString(struct.field);
      }
      if (struct.isSetFacetValues()) {
        {
          oprot.writeI32(struct.facetValues.size());
          for (FacetValue _iter4 : struct.facetValues)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FacetCategory struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.field = iprot.readString();
        struct.setFieldIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.facetValues = new ArrayList<FacetValue>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            FacetValue _elem7;
            _elem7 = new FacetValue();
            _elem7.read(iprot);
            struct.facetValues.add(_elem7);
          }
        }
        struct.setFacetValuesIsSet(true);
      }
    }
  }

}

